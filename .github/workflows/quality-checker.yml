name: Code Quality Check # The name of the workflow, displayed in the GitHub Actions UI.

on:
  pull_request: # This workflow is triggered on pull requests.
    branches:
      - "*" # It runs for all branches.
env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: short

jobs:
  audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v3
      - name: Install Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          target: wasm32-unknown-unknown
          toolchain: stable
          default: true
      - uses: Swatinem/rust-cache@v1
      - name: Cache cargo bin
        uses: actions/cache@v3
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-cargo-bin-${{ hashFiles('**/Cargo.lock') }}
      - name: Install Audit
        run: |
          if ! command -v cargo-audit &> /dev/null; then
            cargo install cargo-audit
          fi
      - name: Run Audit
        run: cargo audit

  lint:
    name: lint-and-format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: wasm32-unknown-unknown
          default: true
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v1
      - name: Test Format
        run: cargo fmt -- --check
      - run: cargo clippy --all-targets --all-features -- -Aclippy::style -Dclippy::perf -D warnings
    
  build: # make sure it build with wasm-pack
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          target: wasm32-unknown-unknown
          toolchain: stable
          default: true
      - uses: Swatinem/rust-cache@v1
      - name: Build with wasm-pack  
        run: |
          if ! command -v wasm-pack &> /dev/null; then
            cargo install wasm-pack
          fi
          wasm-pack build